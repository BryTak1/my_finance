{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bryce\\\\my_finance\\\\frontend\\\\src\\\\DataFetcher.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataFetcher = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [filter, setFilter] = useState(''); // Example of setting a filter\n\n  // Fetch data from backend\n  const fetchData = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/data?filter=${filter}`);\n      const result = await response.json();\n      setData(result);\n      console.log(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  // Fetch data when the component mounts or filter changes\n  useEffect(() => {\n    fetchData();\n  }, [filter]); // Empty array [] means this runs once when component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Fetched Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter filter\",\n      value: filter,\n      onChange: e => setFilter(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchData,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.length > 0 ? data.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.symbol\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this) // Assuming each item has a 'name' property\n      ) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No data found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(DataFetcher, \"uh2yqrcv4P3f+r9SsA9fGmltbrw=\");\n_c = DataFetcher;\nexport default DataFetcher;\nvar _c;\n$RefreshReg$(_c, \"DataFetcher\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DataFetcher","_s","data","setData","filter","setFilter","fetchData","response","fetch","result","json","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","length","map","item","index","symbol","_c","$RefreshReg$"],"sources":["C:/Users/Bryce/my_finance/frontend/src/DataFetcher.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst DataFetcher = () => {\r\n  const [data, setData] = useState([]);\r\n  const [filter, setFilter] = useState('');  // Example of setting a filter\r\n\r\n  // Fetch data from backend\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/data?filter=${filter}`);\r\n      const result = await response.json();\r\n      setData(result);\r\n      console.log(data)\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  // Fetch data when the component mounts or filter changes\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [filter]);  // Empty array [] means this runs once when component mounts\r\n\r\n  return (\r\n    <div>\r\n      <h1>Fetched Data</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter filter\"\r\n        value={filter}\r\n        onChange={(e) => setFilter(e.target.value)}\r\n      />\r\n      <button onClick={fetchData}>Fetch Data</button>\r\n      <ul>\r\n        {data.length > 0 ? (\r\n          data.map((item, index) => (\r\n            <li key={index}>{item.symbol}</li>  // Assuming each item has a 'name' property\r\n          ))\r\n        ) : (\r\n          <li>No data found</li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataFetcher;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAE3C;EACA,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyCJ,MAAM,EAAE,CAAC;MAC/E,MAAMK,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACpCP,OAAO,CAACM,MAAM,CAAC;MACfE,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;;EAED;EACAjB,SAAS,CAAC,MAAM;IACdU,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACF,MAAM,CAAC,CAAC,CAAC,CAAE;;EAEf,oBACEL,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBnB,OAAA;MACEoB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,cAAc;MAC1BC,KAAK,EAAEjB,MAAO;MACdkB,QAAQ,EAAGC,CAAC,IAAKlB,SAAS,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACFnB,OAAA;MAAQ0B,OAAO,EAAEnB,SAAU;MAAAQ,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/CnB,OAAA;MAAAe,QAAA,EACGZ,IAAI,CAACwB,MAAM,GAAG,CAAC,GACdxB,IAAI,CAACyB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnB9B,OAAA;QAAAe,QAAA,EAAiBc,IAAI,CAACE;MAAM,GAAnBD,KAAK;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmB,CAAC,CAAE;MACrC,CAAC,gBAEFnB,OAAA;QAAAe,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IACtB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACjB,EAAA,CA1CID,WAAW;AAAA+B,EAAA,GAAX/B,WAAW;AA4CjB,eAAeA,WAAW;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}